#!/usr/bin/env python3

import os, sys, getopt, httplib2, json, pprint
import boto3
from botocore.client import Config

def create_user(host, port, name, email):
    os.environ['http_proxy'] = ''
    url = 'http://%s:%d/riak-cs/user' % (host, port)
    conn = httplib2.Http()
    resp, content = conn.request(url, "POST",
                                 headers = {"Content-Type": "application/json"},
                                 body = json.dumps({"email": email, "name": name}))
    conn.close()
    try:
        return json.loads(content)
    except:
        print("""
We tried to do a POST to /riak-cs/users, and the request failed:
-----------
%s
-----------
Check to make sure:
  a) riak and riak_cs are both running;
  b) `anonymous_user_creation` is set to `on` in riak-cs.conf.

Note that this script is meant to only be run once. If you lose the
creds, attach to your riak_cs node (`riak-cs daemon_attach`) and do:

  rr(riak_cs_iam),
  {ok, Pbc} = riak_cs_utils:riak_connection(),
  {ok, {Admin, _}} = riak_cs_iam:find_user(#{name => <<"admin">>}, Pbc),
  Admin.

""" % (content))
        exit(1)


def main():
    rcs_host = "127.0.0.1"
    admin_name = "admin"
    admin_email = "admin@me.com"
    port = 8080
    quiet = False

    rcs_bin = os.getenv('RCS_BIN_PATH', default = "/usr/sbin")
    rcs_etc = os.getenv('RCS_ETC_PATH', default = "/etc/riak-cs")

    admin_key_id = None
    admin_key_secret = None

    opts, args = getopt.getopt(sys.argv[1:], 'h:p:e:q', ["help"])
    for o, a in opts:
        if o == "-e":
            admin_email = a
        if o == "-p":
            port = int(a)
        if o == "-q":
            quiet = True
        if o == "--help":
            print("""
A script to create a Riak CS admin user.

  create-admin [-h HOST] [-p PORT] [-e EMAIL] [-q]

Options, with default values:

  -h HOST, riak_cs host (127.0.0.1).
  -p PORT, riak_cs port (8080).
  -e EMAIL, admin user email (admin@me.com).
  -q, only print the creds.

Run this script once, and note down the creds, to be used with your client or Riak CS Control.
""")
            exit(0)

    # preflight check
    _   = os.system(rcs_bin + "/riak-cs stop >/dev/null")
    _   = os.system("sed -i 's/anonymous_user_creation = .+/anonymous_user_creation = on/' %s/riak-cs.conf" % (rcs_etc))
    _   = os.system(rcs_bin + "/riak-cs start >/dev/null")
    res = os.system(rcs_bin + "/riak-cs ping >/dev/null")
    if res != 0:
        print("Couldn't ensure riak-cs is started and pingable")
        exit(1)

    res = create_user("127.0.0.1", port, admin_name, admin_email)
    if quiet:
        print("%s %s %s" % (res['key_id'], res['key_secret'], res['id']))
    else:
        print("An admin user was created with these credentials:")
        pprint.pp(res)

    admin_key_id = res['key_id']
    admin_key_secret = res['key_secret']

    if not quiet:
        print("Now going to sed the admin key_id in %s/riak-cs.conf and restart riak_cs" % (rcs_etc))
    os.system(rcs_bin + "/riak-cs stop")
    res = os.system("sed -i 's/admin\.key = admin-key/admin.key = %s/' %s/riak-cs.conf" % (admin_key_id, rcs_etc))
    if res != 0:
        print("Failed to modify your riak-cs.conf")
        exit(1)
    res = os.system(rcs_bin + "/riak-cs start")

    #boto3.set_stream_logger('')
    os.environ['http_proxy'] = 'http://127.0.0.1:%d' % (port)
    config = Config(signature_version = 's3v4')
    iam_client = boto3.client('iam',
                              use_ssl = False,
                              aws_access_key_id = admin_key_id,
                              aws_secret_access_key = admin_key_secret,
                              config = config)

    policy = json.dumps({
        "Version": "2012-10-17",
        "Statement": [
            {
                "Principal": "*",
                "Effect": "Allow",
                "Action": ["sts:*", "iam:*", "s3:*"],
                "Resource": "*"
            }
        ]
    })
    res = iam_client.create_policy(
        PolicyName = "AdminPolicy",
        PolicyDocument = policy,
        Description = "Admin Policy allowing access to all S3. IAM and STS actions"
    )
    #print(res)
    policy_arn = res['Policy']['Arn']

    res = iam_client.attach_user_policy(
        UserName = "admin",
        PolicyArn = policy_arn,
    )
    if not quiet:
        print("Admin policy", policy_arn, "created and attached to user \"admin\"")

    if not quiet:
        print("Finally, disabling anonymous_user_creation")
    res = os.system("sed -i 's/anonymous_user_creation = on/anonymous_user_creation = off/' %s/riak-cs.conf" % (rcs_etc))
    if res != 0:
        print("Failed to modify your riak-cs.conf")
        exit(1)



if __name__ == "__main__":
    main()
